## Katmanlar 

**Data Access  :** Veritabanında insert-update-delete sorgularını çalıştıracağımız katman. Orm implementasyonları bu katmanda olur.Biz EF ve NHibernate ekledik. Abstract klasörü, diğer katmanların veriye erişim için kullanacağı klasör.Böylece iş katmanı EF yada NHibernate bağlı olmayacak.

**Business  :** Bu katmanda projeyi ilgilendiren iş süreçlerini kodlarız.Örneğin bir kişinin ehliyete ihtiyacı var, biz bu kişiye ehliyet verelim mi diye burada kodlarız.

**Core :** Framework katmanında ; Loglama,Cacheleme,Transaction yönetimi,Performans yönetimi,Validasyon yönetimi,Rol bazlı güvenlik ve diğer araçlarımızı ,veritabanı Orm entegrasyonlarını burada yaparız.

**Entities  :** Burada normal nesnelerin yanı sıra joinli tabloları tutarız.

**Mapping :** Veritabanı ile nesnelerimizin bağlantısını kurar,ilişkilendirilmesini sağlar.Türkçe veritabanı kullanırsak bunu yapmak zorundayız.

**Test  :** Yaptığımız işlemlerin çalışıp çalışmadığını kontrol etmek için Unit Test kullanacağız.(Validation test için test framework kulladık -Moq framework data oluşturmamızı sağlayacak.)

DevFramework.Core Katmanı 

--IEntityRepository : where T : class ,referans tip olmalı
					-new() newlenebilir olmalı
					-IEntity ,sadece entity almasını sağlıyoruz.
					-Liste döndürecek GetList'de Linq Expression kullandık, çünkü datanın tümü yada where koşulu ile belirtilmiş kısmını getirmek istiyoruz.Bu bağlamda bir metot delegesi göndereceğiz , func ile .filter hem boş gönderilebilir(yani herhangi bir filtre 
göndermeyebilir,o zaman tümünü getirecek. ama filtre gönderirse datanın filtrelenmiş versiyonunu db den getirecek)
					-Get ile tek nesne döndürebiliriz,burada da filtre yolladık
					-Add ve Update,datanın eklenmiş hali ile döndüreceğiz.
					-Delete de primary key ile silinmesini sağlayacağız

--IQueryableRepository : Listlerle çalıştığımız zaman context'i açıp kapatırız.Queryable operasyonlarının, business tarafında çalıştırılabilmesi 
					(Context kapanmadan) için de bir repository yazacağız.(Not: IQueryable , IEnumerable dan hızlıdır ve serverda sorgu yapar.)
					-Table operasyonunda readonly yapıyoruz,Bir context'e attach olacağız ona bağlı olarak sorgu yapacağız.
--EFEntityRepositoryBase : Burada iki nesneye ihtiyacımız olacak; TEntity:veritabanı nesnesi,TContext:orm implementasyonu almış nesne ,hangi contexti
					gönderirsek onu alacak.(Basitçe hangi entity için işlem yapacağını söyleceycek.)
--EFQueryableRepositoryBase : 
					-Table kısmında  bir tabloya attach	olup o tablo üzerinden hangi nesneyi verirsek query çalıştırmamızı sağlayacak
					-Context'e ihtiyacımız var, inject ediyoruz,böylelikle bu katmanın herhangi bir bağlılığı olmayacak.
					-Buradaki tablo DbSet'e karşılık geliyor, o yüzden önceden gönderilen entity'e göre abone olacak
--NHibernateHelper : burada nhibernate context karşılığı session yapısını kullanır.
--ValidatorTool    : Gönderdiğimiz validator aracına göre örneğin product,bunlara göre işlem yapacak.Manager'da çağırıyoruz.
--FluentValidationAspect : PostSharp kullanmak için OnMethodBoundaryAspect implemente ettik.OnEntry-metodun girişinde ile metoda girdiğinde 
					doğrulama yapmak için kullanılır.Yani FluentValidationAspect'i kullanan kimse metodun girişinde bu metod devreye girecek.
--ICacheManager		: Hangi data hangi parametrelerle çağırılmışsa ona göre cache oluşturmamız gerekiyor, dolayısıyla her cache datasına isim 
					vermemiz gerekiyor.İsim verme işlemini Unique Key oluşturarak vereceğiz.
--LogParameter      : Burada metot parametresinin ismini ,değerini ve tipini tutuyoruz.
--LogDetail			:İhtiyaç duyduğumuz metodun bilgileri tutuyoruz.
--LoggerService		:Farklı ortamlarda farklı loglama tekniklerini kullanmak için kullanacağız.Örneğin çalışma ortamında debugları kaydedebiliriz.


					
DevFramework.Business Katmanı 	

--Cross cutting concern (Kesişen ilgililer): Validation ,cache ,authorization ,transaction yönetimi,performans yönetimi gibi işlemleri iş 
                    katmanında kullanırız.Bu işlemler business de ortak olarak gerçekleştiriliyor.Bunları ayırmak için Aspect Oriented kullanacağız.
					AO ilgililerin ayrılması prensibine dayanır.AO kullanmak için postSharp yükleyip kullanacağız.

--Business katmanda IProductService ve ProductManager oluşturduk.IPService'e birkaç metot ekledik ve core katmanındaki metotlarla devam ettirdik.
					Burada validasyon işlemini yapacağız.Validasyon bir nesnenin format olarak uyumluluğu anlamına gelir.
					DataAnatotation ile yapılan validasyonlar Solid'e aykırı oluyor.Entity'e koyulan DA yanlış katmanda yazılmış oluyor ve bir 
					class içinde başka işlemler de yapmış oluyoruz.
--ProductManager   : Burada validasyonu Aspect oriented ile kullanacağız. Add metodunda geçen product'ın,db'ye eklenirken validation kuralına 
                    uyup uymadığına bakacağız.Fakat single responsibility den dolayı Validator Tool'u kullanmayıp, bunu Aspect oriented
					ile yapıyoruz.
					FluentValidate'i kullanabilmek için PostSharp-lisanslama için- yükledik.Ve postharp dll yükledik.



DevFramework.Business.Test Katmanı
					Burada diğer katmanları test ederken kullanmamamız gerektiği için,buna yönelik işlem yapacağız.
--ProductManagerTests : Burada product manager'ın validationunu test edeceğiz.ProductManager , productDal'ı başka katmandan alır.
					 Dolayısıyla MOQ framework bize IProductDal için bir concrete oluşturacak.Database'e gitmemiş olacağız.DataAccess,Core,Entities
					 ve Business'e referans veriyoruz.


DevFramework.MvcWebUI Katmanı 

--log4net.Config	:Yaptığımız loglarla ilgili config dosyasına ihtiyacımız var.Bu config dosyasını kullandığımızı web config'e yazıyoruz.
					Logları yazabilmek için db'de Logs tablosu oluşturduk.



NOT: Arayüzde hiçbir zaman Product'ın değerleri doğru mu gibi kontolleri yapmamalıyız.Başka arayüze geçince problem olur ,businnesde yapılmalı.
	Mvc'de modelStateIsValid ters kalıyor.(Clientside validation yapılabilir.)
	
	
